{
	"info": {
		"_postman_id": "2aee64dd-c7e4-46bb-8684-4778e169cee9",
		"name": "Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33452047"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "fresh-produce",
									"disabled": true
								},
								{
									"key": "results",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(response).to.be.an('object')\r",
									"})\r",
									"\r",
									"pm.test(\"Product name\", () => {\r",
									"    pm.expect(response.name).to.eql(\"20V Max Cordless Drill Combo Kit\")\r",
									"    //console.log(response.name)\r",
									"})\r",
									"\r",
									"pm.test(\"Product price\", () => {\r",
									"    pm.expect(response.price).to.be.a('number')\r",
									"    pm.expect(response.price).to.be.above(0)\r",
									"})\r",
									"\r",
									"pm.test(\"Product is in stock\", () => {\r",
									"    pm.expect(response.inStock).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId?product-label=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "product-label",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "3674",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\": 4643\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								},
								{
									"key": "itemId",
									"value": "247936358",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace product in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 4643,\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								},
								{
									"key": "itemId",
									"value": "247936358",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "string"
								},
								{
									"key": "itemId",
									"value": "247936358",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Ibrahim\",\r\n   \"clientEmail\": \"ibrata42@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"name": "authorization",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"name": "cache-control",
								"type": "text"
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"name": "postman-token",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"name": "host",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1",
								"name": "user-agent",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"name": "accept",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"name": "accept-encoding",
								"type": "text"
							},
							{
								"key": "Connection",
								"value": "keep-alive",
								"name": "connection",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"name": "authorization",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"name": "cache-control",
								"type": "text"
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"name": "postman-token",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"name": "host",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1",
								"name": "user-agent",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"name": "accept",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"name": "accept-encoding",
								"type": "text"
							},
							{
								"key": "Connection",
								"value": "keep-alive",
								"name": "connection",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Ibrahim Doe\",\r\n    \"comment\": \"pick at 2:00PM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "7bygMEZE5ZtaWvmFTldJt",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"name": "authorization",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"name": "cache-control",
								"type": "text"
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"name": "postman-token",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"name": "host",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1",
								"name": "user-agent",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"name": "accept",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"name": "accept-encoding",
								"type": "text"
							},
							{
								"key": "Connection",
								"value": "keep-alive",
								"name": "connection",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "7bygMEZE5ZtaWvmFTldJt",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get signle order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"name": "authorization",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"name": "cache-control",
								"type": "text"
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"name": "postman-token",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"name": "host",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1",
								"name": "user-agent",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"name": "accept",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"name": "accept-encoding",
								"type": "text"
							},
							{
								"key": "Connection",
								"value": "keep-alive",
								"name": "connection",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "6NT5GmUmVoEq1C31LKRF_",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Authentication",
			"item": [
				{
					"name": "Missing Header",
					"item": [
						{
							"name": "Create order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"name": "authorization",
										"type": "text"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"name": "cache-control",
										"type": "text"
									},
									{
										"key": "Postman-Token",
										"value": "<calculated when request is sent>",
										"name": "postman-token",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "<calculated when request is sent>",
										"name": "host",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.39.1",
										"name": "user-agent",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"name": "accept",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate, br",
										"name": "accept-encoding",
										"type": "text"
									},
									{
										"key": "Connection",
										"value": "keep-alive",
										"name": "connection",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", () =>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql('Missing Authorization header.')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"name": "authorization",
										"type": "text"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"name": "cache-control",
										"type": "text"
									},
									{
										"key": "Postman-Token",
										"value": "<calculated when request is sent>",
										"name": "postman-token",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "content-type",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "<calculated when request is sent>",
										"name": "content-length",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "<calculated when request is sent>",
										"name": "host",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.39.1",
										"name": "user-agent",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"name": "accept",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate, br",
										"name": "accept-encoding",
										"type": "text"
									},
									{
										"key": "Connection",
										"value": "keep-alive",
										"name": "connection",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "8f98fe4f58342e78c947957c3de8e196fd9d22e78fabb4acf2742db0b9ae2e0e1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"name": "authorization",
										"type": "text"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"name": "cache-control",
										"type": "text"
									},
									{
										"key": "Postman-Token",
										"value": "<calculated when request is sent>",
										"name": "postman-token",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "<calculated when request is sent>",
										"name": "host",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.39.1",
										"name": "user-agent",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"name": "accept",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate, br",
										"name": "accept-encoding",
										"type": "text"
									},
									{
										"key": "Connection",
										"value": "keep-alive",
										"name": "connection",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer invlalidToken",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql('Invalid bearer token.')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			]
		},
		{
			"name": "Invalid inputs",
			"item": [
				{
					"name": "Get all products - Invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'category'.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=invalid-category&results=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category"
								},
								{
									"key": "results",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid results max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category",
									"disabled": true
								},
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid results min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Must be greater than 0.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-grocery-store-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "ACCESS TOKEN",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "",
			"type": "string"
		}
	]
}